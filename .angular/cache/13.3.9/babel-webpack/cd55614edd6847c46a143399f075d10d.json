{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { from, lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"keycloak-angular\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(keycloakService) {\n      this.keycloakService = keycloakService;\n    }\n\n    intercept(req, next) {\n      // convert promise to observable using 'from' operator\n      return from(this.handle(req, next));\n    }\n\n    handle(req, next) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // if your getAuthToken() function declared as \"async getAuthToken() {}\"\n        const authToken = yield this.keycloakService.getToken(); // console.log(authToken);\n        // if your getAuthToken() function declared to return an observable then you can use\n        // await this.auth.getAuthToken().toPromise()\n\n        const authReq = req.clone({\n          setHeaders: {\n            Authorization: 'Bearer' + authToken\n          }\n        });\n        return yield lastValueFrom(next.handle(authReq));\n      });\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.KeycloakService));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}